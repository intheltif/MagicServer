package server;

/**
 * This class provides an abstract exception that can be generated by any magic 
 * server. This can be used to "wrap" other exceptions generated by server 
 * implementations.
 *
 * @author Evert Ball
 * @version 01 November 2019
 */
public class MagicServerException extends Exception {
    
    /** The error message to be sent as part of the exception. */
    private String message;

    /** The Throwable object to be wrapped by this exception */
    private Throwable throwable;

    /**
     * Creates a new <code>MagicServerException</code> with no message or
     * <code>Throwable</code> object wrapped inside it.
     */
    public MagicServerException() {

        this.message = "";
        this.throwable = null;

    } // end constructor w/ no msg

    /**
     * Creates a new <code>MagicServerException</code> with the specified 
     * message, and wraps the specified <code>Throwable</code> object.
     *
     * @param message   The message to be thrown with this exception.
     * @param throwable The <code>Throwable</code> object to be wrapped by this
     *                  exception.
     */
    public MagicServerException(String message, Throwable throwable) {

        this.message = message;
        this.throwable = throwable;

    } // end msg, throwable constructor

    /**
     * Creates a new <code>MagicServerException</code> that wraps the specified 
     * <code>Throwable</code> object.
     *
     * @param throwable The <code>Throwable</code> object to be wrapped by this
     *                  exception.
     */
    public MagicServerException(Throwable throwable) {

        this.message = "";
        this.throwable = throwable;

    } // end msg, throwable constructor

    /**
     * Returns a string containing the message for this
     * <code>MagicException</code>.
     *
     * @return A string containing the message for this
     *         <code>MagicException</code>
     */
    public String getMessage() {
        return this.message;
    }

    /**
     * Returns a <code>Throwable</code> object that this exception is the
     * wrapper around. If this exception does not wrap a <code>Throwable</code>
     * object, then null is returned.
     *
     * @return The <code>Throwable</code> object this exception wraps around.
     *         May be null.
     */
    public Throwable getThrowable() {
        return this.throwable;
    }

} // end MagicServerException class
